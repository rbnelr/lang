/*
a := 2;
b := -2;

sel := timer() % 2 != 0;

printf("a: {i}  b: {i}\n", a,b);

(sel ? a : b) /= 2;

printf("a: {i}  b: {i}\n", a,b);

(!sel ? a : b) /= 2;

printf("a: {i}  b: {i}\n", a,b);
*/

/*
func fib_iter () {
	n : int;
	{
		a := 5;
		b := 10;
		n = a * b - 5;
	}

	a := 0;
	b := 1;

	printf("Fibbonaci: {i} {i}", a, b);

	for i := 0; i < n-2; i++ {
		c := a + b;
		printf(" {i}", c);
		a = b;
		//break;
		b = c;
	}

	printf("\n");
	return;
}

fib_iter();
*/

/*
func sqrt (square : int) = (sqrt : int) { 
	sqrt = -1;
	for i:=0; i<100; i++ {
		if i*i == square {  
			sqrt = i;
			break;
		}
	}
	printf("sqrt({i}) is {i}\n", square, sqrt);
}

sqrt(625); // 25^2
*/

func pascal_tri (rows : int) {
	func get_cell (i : int, row : int) = (result : int) {
		if i < 0 || i > row {
			return 0;
		}
		if row == 0 {
			return 1;
		}
		a := get_cell(i-1, row-1);
		b := get_cell(i  , row-1);
		
		return a + b;
	}
	for row:=0; row < rows; row++ {

		for i:=0; i < rows-1 - row; i++ {
			printf("  ");
		}

		for i:=0; i<=row; i++ {
			val := get_cell(i, row);
			printf("{^3i} ", val);
		}

		printf("\n");
	}
}

// pascal_tri(13);
for i:=0; i<=13; i++ {
	start := timer();
	
	pascal_tri(i);
	
	dur := timer_end(start);
	printf("pascal_tri({i}): {f} ms\n\n", i, dur * 1000.0);
}

/*
func test (a : int, b : int) = (ret : int) {
	//a := 5;
	//b := 3;
	c : int;
	
	t := timer();
	
	c = 7;
	k := 0;
	if ((t % 2) != 0) {
		k = c++;
	}
	else {
		printf("foobar {i}!\n", t);
		return 0;
	}
	
	d := a + b * c;
	
	printf("Blah1: d: {i}  k: {i}\n", d, k);
	printf("Blah1: d: {i}  t: {i}\n", d, t);
	
	printf("Blah2: {i}-{i}-{i} {i}-{i}-{i}\n", a, a, a, b, b, b);
	
	return d;
}

for i := 0; i<10; i++ {
	printf("\n>> i: {i}\n", i);
	test(i, 3);
}
*/