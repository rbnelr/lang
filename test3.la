
// Comment
/*
	Comment
	word
	/*
		
	*/
	// blah
*/

h := "foo";
h2 := "bar";

printf("start {} {}\n", h, h2);

capt2 := "cap2";
capt1 := "cap1";

func indent (depth) {
	for i:=0; i<depth; i++ {
		printf("  ");
	}
}

func B (msg, depth) {
	indent(depth); printf("B ^{\n");
	indent(depth+1); printf("{}!\n", msg);

	indent(depth+1); printf("var capture does not work!");
	indent(depth+1); printf("this should say \"cap2\" -> \"{capt2}\"\n", capt2);

	indent(depth); printf("}\n");

	if depth != 0 {
		return;
	}
	indent(depth); printf("B -> Hello World!\n");
}

//A(); does not work yet, resolver would have to do a prescan

func A (depth) {
	indent(depth); printf("A ^{\n");

	mymsg := "Hello from A";
	B("test", depth+1);
	B(mymsg, depth+1);

	indent(depth+1); printf("\n");
	indent(depth+1); printf("var capture should not work! {capt1}\n", capt1);

	indent(depth); printf("}\n");
}

B("from main", 0);
A(0);

func myprint (msg) {
	printf(" prin {}", msg);
}

printf("-----------\n");
for i:=0; i<10; i++ {
	myprint(i);
	
	func get_msg () = (msg) {
		msg = "---";
	} 
	mymsg := get_msg();

	{
		myprint(mymsg);
	}

	printf("\n");
}
