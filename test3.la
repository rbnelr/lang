
// Comment
/*
	Comment
	word
	/*
		
	*/
	// blah
*/

h := "foo";
h2 := "bar";

printf("start {s} {s}\n", h, h2);
printf("\n");

capt2 := "cap2";
capt1 := "cap1";

func indent (depth : int) {
	for i:=0; i<depth; i++ {
		printf("  ");
	}

	{
		Test(); // works
	}

	func Test () {}
}

// Test(); // error: unknown identifer

B("from main before", 0);
printf("\n");

func B (msg : str, depth : int) {
	indent(depth);   printf("B ^{\n");
	indent(depth+1); printf("{s}!\n", msg);

	//indent(depth+1); printf("var capture does not work!");
	//indent(depth+1); printf("this should say \"cap2\" -> \"{capt2}\"\n", capt2);

	indent(depth); printf("}\n");

	if depth != 0 {
		return;
	}
	indent(depth); printf("B -> Hello World!\n");
}

A(0); // does not work yet, resolver would have to do a prescan
printf("\n");

func A (depth : int) {
	indent(depth); printf("A ^{\n");

	mymsg := "Hello from A";
	B("test", depth+1);
	B(mymsg,  depth+1);

	//indent(depth+1); printf("\n");
	//indent(depth+1); printf("var capture should not work! {capt1}\n", capt1);

	indent(depth); printf("}\n");
}

B("from main", 0);
printf("\n");

A(0);
printf("\n");

func myprint (msg : str) {
	printf(" prin {s}", msg);
}
func myprinti (i : int) {
	printf(" prin {i}", i);
}

printf("-----------\n");
for i:=0; i<10; i++ {
	myprinti(i);
	
	func get_msg () = (msg : str) {
		msg = "---";
	} 
	mymsg := get_msg();
	
	{
		myprint(mymsg);
	}
	
	printf("\n");
}
