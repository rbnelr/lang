
//// void return funcs

//a := fvoid(); // error: assignment: void is not a valid variable type.
fvoid("a1", "b1");
fvoid2(ret=false, a="a2");
fvoid2("a3", ret=true);
fvoid2(b="b4", a="a4");

//fvoid();
//fvoid("a1", "b1", "c1"); // error: too many arguments.
//fvoid2(ret=true, "a3"); // error: named arguments can only appear after all positional arguments.
//fvoid2(c=true, "a3"); // error: unknown argument.
fvoid2("a1", a="a2"); // error: argument already set in call.

func fvoid (a : str, b := "b") {
	printf("\n{s}\n", a);
	return; // return actually returns
	printf("{s}\n", b);
}
// default argument
func fvoid2 (a : str, b := "b", ret := false) = () {
	printf("\n{s}\n", a);
	if (ret) {
		return;
	}
	printf("{s}\n", b);
}
 
//func fvoid3 (b := "b", a : str) {} // error: default arguments can only appear after all positional arguments.
//func fvoid4 (a : str, a := "a_again") {} // error: identifer already declared in this scope.


//// single-value return
/*
printf("----------\n");

//printf("{s}\n", fA0());
//printf("{s}\n", fA1());
printf("{s}\n", fA2());
printf("{s}\n", fA3(true));
printf("{s}\n", fA3(false));
printf("{s}\n", fA4());
printf("{s}\n", fA5());
printf("{s}\n", fA6());

func fA0 () = (msg : str) {
	
}
func fA1 () = (msg : str) {
	// TODO: could generate this error:
	// error: too few arguments to function, required argument not provided.
	// but we do not have uninitialized variable tracking yet
	// and thus can't generate this error while also allowing this:
	// msg = "hello4"; return;
	return;
}
func fA2 () = (msg := "none") {
	return;
}
func fA3 (default : bool) = (msg := "none") {
	if (!default) {
		msg = "hello3";
	}
	return;
}
func fA4 () = (msg : str) {
	msg = "hello4";
	return;
}
func fA5 () = (msg : str) {
	return "hello5";
}
func fA6 () = (msg : str) {
	return msg = "hello6";
}
*/

//// Multiple return values

printf("----------\n");

err := MR0(false);
if err.err {
	printf("error: {s}!\n", err.errmsg);
}

err  = MR0(true);
if err.err {
	printf("error: {s}!\n", err.errmsg);
}

func MR0 (trigger_error : bool) = (err := false, errmsg := "") {
	if trigger_error {
		err = true;
		errmsg = "Something happened!";
	}
}

// -> return already-written-to return vars
//      func () = (i: int)  { return; }                  // error: uninitialized return var on return
//      func () = (i:=5)    { return; }                  // no error (already default inited)
//      func () = (int)     { return 5; }                // ok? (no return value name) -> maybe don't allow this (I dislike how return values are nameless)
//      func () = (i: int)  { return 5; }                // ok
//      func () = (i: int)  { i=5; return; }             // ok
//	  
// -> return multiple vars
//      func () = (x: int, y: int) { x=5; return; }      // error: uninitialized return var 'y' on return
//      func () = (x: int, y: int) { x=5; y=6; return; } // ok
//      func () = (x: int, y := 3) { return 5, 6; }      // ok (positional return vars)
//      func () = (x: int, y: int) { y=6; return 5; }    // ok since y already set? maybe not allow this? 
//      func () = (x: int, y: int) { return x=5, y=6; }  // ok
//      func () = (x: int, y: int) { x=5; return y=6; }  // ok?
//	
//turn IR into real SSA format
